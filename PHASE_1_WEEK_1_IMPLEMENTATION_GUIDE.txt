CRITICAL FUNCTIONS IMPLEMENTATION GUIDE
========================================

This document provides the specific function implementations needed for the mock infrastructure and key test scenarios.

==============================================
SECTION 1: MOCK SIMCONNECT IMPLEMENTATION
==============================================

Location: aicopilot/tests/mocks/mock_simconnect.cpp (NEW FILE)

Implementation Notes:
- All methods use Google Mock framework
- State storage provided by member variables
- Callbacks stored and invoked manually
- Thread-safe where necessary

Key Implementation Details:

a) Constructor/Destructor
   - Initialize mock state with defaults
   - Set isConnected_ = false initially
   - Create empty callback storage

b) Connection Management
   - connect(): Return isConnected_ value or parameter-set value
   - isConnected(): Return isConnected_ flag
   - disconnect(): Set isConnected_ = false

c) State Management
   - getAircraftState(): Return mockAircraftState_
   - setMockAircraftState(): Store for later retrieval
   - stateCallback_: Store callback for manual invocation

d) Callback Testing
   - emitAircraftState(): Call stateCallback_ if set
   - emitATCMessage(): Call atcCallback_ if set
   - Enables testing of subscription behavior

Implementation Template:

```cpp
#include "mock_simconnect.hpp"

namespace AICopilot {
namespace Testing {

MockSimConnectWrapper::MockSimConnectWrapper()
    : isConnected_(false)
{
    // Initialize default mock state
    mockAircraftState_.position = {0.0, 0.0, 0.0, 0.0};
    mockAircraftState_.indicatedAirspeed = 0.0;
    mockAircraftState_.onGround = false;
}

void MockSimConnectWrapper::setConnected(bool connected) {
    isConnected_ = connected;
}

void MockSimConnectWrapper::setMockAircraftState(const AircraftState& state) {
    mockAircraftState_ = state;
}

void MockSimConnectWrapper::setMockPosition(const Position& pos) {
    mockPosition_ = pos;
}

void MockSimConnectWrapper::emitAircraftState(const AircraftState& state) {
    if (stateCallback_) {
        stateCallback_(state);
    }
}

void MockSimConnectWrapper::emitATCMessage(const ATCMessage& msg) {
    if (atcCallback_) {
        atcCallback_(msg);
    }
}

} // namespace Testing
} // namespace AICopilot
```

==============================================
SECTION 2: CRITICAL TEST SCENARIOS
==============================================

TEST SCENARIO 1: Navigation Accuracy
Location: navigation_test.cpp
Function: NavigationTest::DistanceCalculationAccuracy

Purpose: Verify great circle distance calculation
Setup: Two known cities (NYC to LAX)
Expected: Distance within 1% of known value
Why Critical: All route planning depends on this

Test Data:
- NYC: 40.7128°N, 74.0060°W
- LAX: 34.0522°N, 118.2437°W
- Expected distance: ~2,100 nautical miles
- Test tolerance: ±21 nm (1%)

Verification:
✓ Uses Haversine formula for comparison
✓ Tests both directions
✓ Verifies consistency

---

TEST SCENARIO 2: Collision Detection
Location: collision_avoidance_test.cpp
Function: CollisionDetectionTest::CircleCircleOverlap

Purpose: Verify spatial collision detection
Setup: Two circles with known overlap
Expected: Collision detected
Why Critical: Core safety system

Test Data:
- Aircraft 1: Position (0,0), radius 500 ft
- Aircraft 2: Position (400,0), radius 500 ft
- Separation: 400 ft < 1000 ft combined radius = COLLISION

Verification:
✓ Tests overlap condition
✓ Tests separation condition
✓ Tests edge case (touching circles)

---

TEST SCENARIO 3: Separation Standards Compliance
Location: collision_avoidance_test.cpp
Function: CollisionDetectionTest::LateralSeparationViolation

Purpose: Verify conflict type classification
Setup: Two aircraft at same altitude, too close
Expected: SameAltitude conflict detected
Why Critical: Flight safety regulation

Test Data:
- AC1: Position (0,0), altitude 5000 ft
- AC2: Position (200,0), altitude 5000 ft
- Required separation: 500 ft
- Actual separation: 200 ft = VIOLATION

Verification:
✓ Detects violation
✓ Classifies type correctly
✓ Tests various heading combinations

---

TEST SCENARIO 4: Weather-Based Decisions
Location: weather_system_test.cpp
Function: WeatherSystemTest::CrosswindCalculation

Purpose: Verify wind component calculations
Setup: Known wind and aircraft heading
Expected: Correct headwind/crosswind components
Why Critical: Affects takeoff/landing feasibility

Test Data:
- Wind: 20 knots from north (heading 0°)
- Aircraft heading: 90° (east)
- Expected headwind: 0 knots (tail wind)
- Expected crosswind: 20 knots (full crosswind)

Verification:
✓ Vector decomposition correct
✓ Handles all 4 quadrants
✓ Tests 90° increments

---

TEST SCENARIO 5: Terrain Clearance
Location: terrain_awareness_test.cpp
Function: TerrainAwarenessTest::TerrainClearanceSafe

Purpose: Verify terrain warning system
Setup: Aircraft at safe altitude
Expected: No terrain warning
Why Critical: Terrain collision prevention

Test Data:
- Position: New York area (sea level terrain)
- Altitude: 5000 ft MSL
- Required clearance: 1000 ft minimum
- Actual clearance: ~5000 ft = SAFE

Verification:
✓ Returns NONE warning level
✓ Calculates clearance > 0
✓ Tests various altitudes

---

TEST SCENARIO 6: Machine Learning Decision
Location: ml_decision_system_test.cpp
Function: MLDecisionSystemTest::LearningFromMultipleExamples

Purpose: Verify ML training and prediction
Setup: Train on consistent patterns
Expected: Predictions converge on correct option
Why Critical: Improves ATC decision making over time

Test Data:
- Train 10 examples all selecting option 0
- Prediction should be option 0
- Confidence should increase with more training

Verification:
✓ Stores training data
✓ Predictions improve with training
✓ Confidence increases monotonically

==============================================
SECTION 3: KEY EDGE CASES TO TEST
==============================================

Edge Case 1: Antimeridian Crossing
Function: Navigation::distanceToWaypoint()
Scenario: Route from 179°W to 179°E (Pacific Ocean)
Expected: 120 nm, not 20,000+ nm
Importance: Prevents broken routes across prime meridian

Edge Case 2: Zero Velocity Aircraft
Function: SeparationStandards::calculate_closest_point_of_approach()
Scenario: Stationary aircraft + moving aircraft
Expected: Distance decreases linearly
Importance: Prevents division by zero

Edge Case 3: Identical Positions
Function: CollisionDetector::check_circle_circle_collision()
Scenario: Two aircraft at exact same location
Expected: Collision detected immediately
Importance: Critical safety condition

Edge Case 4: Extreme Altitude Clamping
Function: AircraftSystems::setAutopilotAltitude()
Scenario: Request altitude 50,000 ft on aircraft max 43,000 ft
Expected: Clamp to 43,000 ft
Importance: Prevents invalid commands

Edge Case 5: High Wind Speed
Function: WeatherSystem::isWeatherSuitableForTakeoff()
Scenario: 50+ knot wind
Expected: May reject takeoff for small aircraft
Importance: Safety-aware decision making

Edge Case 6: Rapid Descent Rate
Function: TerrainAwareness::predictTerrainConflict()
Scenario: 5000 fpm descent with mountain ahead
Expected: Predict collision
Importance: Ground proximity warning

==============================================
SECTION 4: COVERAGE MEASUREMENT STRATEGY
==============================================

GCov Integration:

1. Configure build for coverage:
   cmake -B build -DBUILD_TESTS=ON \
         -DCMAKE_CXX_FLAGS="--coverage" \
         -DCMAKE_EXE_LINKER_FLAGS="--coverage"

2. Build project:
   cmake --build build

3. Run all tests:
   cd build && ctest --output-on-failure

4. Generate coverage reports:
   gcov CMakeFiles/aicopilot.dir/aicopilot/src/**/*.cpp.gcda

5. View HTML report (requires lcov):
   lcov --directory . --capture --output-file coverage.info
   genhtml coverage.info --output-directory coverage_report
   open coverage_report/index.html

Expected Coverage by Component:

Navigation:
- File: navigation.cpp
- Target: 30% (currently 5%)
- Key functions: distanceToWaypoint (100%), bearingToWaypoint (100%)
- Impact: +25 percentage points

Collision:
- File: collision_avoidance.hpp (header-only pragmatic)
- Target: 35% (currently 2%)
- Key functions: check_separation_conflict (95%)
- Impact: +33 percentage points

Aircraft Systems:
- File: aircraft_systems.cpp
- Target: 25% (currently 3%)
- Key functions: setAutopilotAltitude (90%)
- Impact: +22 percentage points

Weather:
- File: weather_system.cpp
- Target: 28% (currently 4%)
- Key functions: calculateWindComponents (100%)
- Impact: +24 percentage points

Terrain:
- File: terrain_awareness.cpp
- Target: 22% (currently 2%)
- Key functions: checkTerrainClearance (85%)
- Impact: +20 percentage points

ML:
- File: ml_decision_system.cpp
- Target: 18% (currently 1%)
- Key functions: makeATCDecision (80%)
- Impact: +17 percentage points

---

TOTAL EXPECTED COVERAGE: 40-45%

==============================================
SECTION 5: DEBUGGING FAILED TESTS
==============================================

Common Issues & Solutions:

Issue 1: Mock not being called
Symptom: EXPECT_CALL fails
Cause: Mock object not connected properly
Solution: 
  - Verify mock passed to system under test
  - Check that method name matches exactly
  - Verify parameter types match

Issue 2: Distance calculation precision
Symptom: EXPECT_NEAR fails by 0.5 nm
Cause: Numerical precision in trig functions
Solution:
  - Increase tolerance (0.01 instead of 0.001)
  - Use EXPECT_DOUBLE_EQ for exact values
  - Check coordinate format (degrees vs radians)

Issue 3: Floating point comparison
Symptom: Test expects 0.0, gets -0.0 or 1e-10
Cause: IEEE 754 floating point precision
Solution:
  - Use EXPECT_NEAR with epsilon tolerance
  - Use EXPECT_DOUBLE_EQ for exact zeros
  - Normalize results before comparison

Issue 4: CMake Google Test integration
Symptom: gtest_discover_tests fails
Cause: GTest not properly linked
Solution:
  - Verify FetchContent_MakeAvailable(googletest) in CMakeLists.txt
  - Check target_link_libraries includes gtest
  - Run cmake --build build --target all

Issue 5: Test timeout
Symptom: Test hangs or runs very slowly
Cause: Infinite loop or very slow calculation
Solution:
  - Add test timeout: ctest --timeout 5
  - Check for large dataset processing
  - Verify no deadlocks in test setup

---

SECTION 6: TEST EXECUTION CHECKLIST
===================================

Pre-Execution:
□ CMakeLists.txt updated with BUILD_TESTS=ON
□ All test files in correct locations
□ Mock headers created with full interface
□ Mock implementations provide storage
□ GTest v1.14.0 dependency available

Build Phase:
□ cmake -B build -DBUILD_TESTS=ON runs without error
□ cmake --build build compiles all tests
□ No compilation warnings in test code
□ Linker resolves all Google Test symbols
□ aicopilot_tests executable created

Execution Phase:
□ ctest runs from build directory
□ All tests discover and list properly
□ Tests execute in < 30 seconds total
□ No test segmentation faults
□ Test output clear and readable

Verification Phase:
□ Coverage report generated
□ Coverage >= 40% achieved
□ All critical functions covered
□ Edge cases tested
□ Pass rate 100%

---

SECTION 7: INTEGRATION WITH CI/CD
===================================

GitHub Actions Example:

name: Unit Tests
on: [push, pull_request]
jobs:
  test:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Configure CMake
        run: cmake -B build -DBUILD_TESTS=ON
      - name: Build
        run: cmake --build build
      - name: Run Tests
        run: cd build && ctest --output-on-failure
      - name: Generate Coverage
        run: |
          gcov CMakeFiles/aicopilot.dir/**/*.cpp.gcda
          curl -s https://codecov.io/bash | bash

---

Document Version: 1.0
Last Updated: Phase 1, Week 1
Status: IMPLEMENTATION READY

